package com.gatbhet.config;

import android.app.Activity;
import android.app.Dialog;
import android.app.NotificationManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.net.ConnectivityManager;
import android.support.v4.app.NotificationCompat;
import android.support.v7.app.AlertDialog;
import android.text.Html;
import android.util.Log;

import com.gatbhet.R;
import com.gatbhet.model.Alert;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;

public class Util {

    public static final String PREFS_NAME = "AOP_PREFS";
    private static final String PREFS_USERNAME = "USERNAME";
    private static final String PREFS_PASSWORD = "PASSWORD";
    private static final String PREFS_LAST_NOTIFICATION_ID = "LAST_NOTIFICATION_ID" ;
    private static final String PREFS_USER_TYPE = "USER_TYPE";
    private static final String USER_TYPE_SUPPORT = "clg";

    public static String convertInputStreamToString(InputStream inputStream) {
        StringBuilder sb = new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
        String read;
        try {
            while ((read = br.readLine()) != null) {
                //System.out.println(read);
                sb.append(read);
            }
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sb.toString();
    }

    public static void log(String tag,String message){
        if(Constants.IS_LOGGING_ENABLED){
            Log.d(tag,message);
        }
    }


    public static String getMD5(String input) throws NoSuchAlgorithmException {
        String md5="MD5";
        MessageDigest digest = java.security.MessageDigest
                .getInstance(md5);
        digest.update(input.getBytes());
        byte messageDigest[] = digest.digest();
        Util.log("Util","MD5 : " + convertToHex(messageDigest));
        return convertToHex(messageDigest);
    }

    public static String getSHA256(String input) throws NoSuchAlgorithmException {
        String sha256="SHA256";
        MessageDigest digest = java.security.MessageDigest
                .getInstance(sha256);
        digest.update(input.getBytes());
        byte messageDigest[] = digest.digest();
        Util.log("Util","SHA256 : " + convertToHex(messageDigest));
        return convertToHex(messageDigest);
    }

    public static String convertToHex(byte[] input){
        StringBuilder hexString = new StringBuilder();
        for (byte aMessageDigest : input)
        {
            String h = Integer.toHexString(0xFF & aMessageDigest);
            while (h.length() < 2)
                h = "0" + h;
            hexString.append(h);
        }
        return hexString.toString();
    }

    public static String getTimeStamp(){

        Date todayDate = new Date();
        long  time = todayDate.getTime();
        return String.valueOf(time) ;

    }

    public  static  String createSecurityToken(String request_token, String timeStamp,HashMap<String,String> params,String userPassword) throws NoSuchAlgorithmException {
        Random random = new Random();
        int offset = random.nextInt(6) + 4;
//        Util.log("","Offset Vaue : "+offset);
        int length = random.nextInt(2) + 8;
//        Util.log("","Length Vaue : "+length);

        String prefix = String.valueOf(offset +""+ length);
//        Util.log("","prefix Vaue : "+prefix);

//        Util.log("","MD5 for user_pass : "+ getMD5(Constants.user_pass));
//        Util.log("","Timestamp Vaue : "+timeStamp);
//        Util.log("","request token Vaue : "+request_token);
        String security_token = getSHA256(request_token + getMD5(userPassword)+timeStamp);
        String sufix = security_token.substring(offset,offset+length);
//        Util.log("","sufix Vaue : "+sufix);


        security_token = security_token.substring(0,offset) + security_token.substring(offset+length,security_token.length());
//        Util.log("","Security token after applying offset and lenght substring replace : "+security_token);
        security_token = prefix+security_token+sufix;
//        Util.log("","Security token after concating offset and lenght : "+security_token);
        security_token += getMD5(getValuesOfParam(params));  // Final security token, this will change in each request
//        Util.log("","param : "+params);
//        Util.log("","Security token after MD5 of params : "+security_token);
        return  security_token;

    }

    public static String getKeyValueQueryParam(HashMap<String,String> requestParams) {
        StringBuilder keyValuePairRequest = new StringBuilder();
        if(requestParams.size() > 1) {
            String[] keyValArray = new String[requestParams.size()];
                for (String key : requestParams.keySet()) {
                Util.log("Query Params", "key : " + key);
                    switch (key){
                        case "caller_ref_id":
                            keyValArray[0] = key + "=" + requestParams.get(key) + "&";
                            break;
                        case "lat":
                            keyValArray[1] = key + "=" + requestParams.get(key) + "&";
                            break;
                        case "long":
                            keyValArray[2] = key + "=" + requestParams.get(key) + "&";
                            break;
                        case "request_for":
                            keyValArray[3] = key + "=" + requestParams.get(key) + "&";
                            break;
                        case "request_token":
                            keyValArray[4] = key + "=" + requestParams.get(key) + "&";
                            break;
                        case "timestamp":
                            keyValArray[5] = key + "=" + requestParams.get(key) + "&";
                            break;
                        case "nt_last_load_id":
                            keyValArray[6] = key + "=" + requestParams.get(key) + "&";
                            break;
                        default:
                            Util.log("Util","Invalid Key");
                            break;

                    }
                }

            for (String keyValItem: keyValArray) {
                keyValuePairRequest.append(keyValItem);
            }
        }else{
            for (String key : requestParams.keySet())
                keyValuePairRequest.append(key).append("=").append(requestParams.get(key)).append("&");
        }
        if(keyValuePairRequest.length()>0){
            Util.log("Util","Key Val Params : " + keyValuePairRequest.substring(0,keyValuePairRequest.length()-1));
            return keyValuePairRequest.substring(0,keyValuePairRequest.length()-1);
        }
        return null;
    }

    public static String getValuesOfParam(HashMap<String,String> requestParams) {
        StringBuilder keyValuePairRequest = new StringBuilder();
        if(requestParams.size()==1) {
            for (String key : requestParams.keySet()) {
                Util.log("Key", "Value : " + key);
                keyValuePairRequest.append(requestParams.get(key));
            }
        }else {
            String[] keyValArray = new String[requestParams.size()];
            for (String key : requestParams.keySet()) {
                Util.log("Query Params", "key : " + key);
                switch (key){
                    case "caller_ref_id":
                        keyValArray[0] = requestParams.get(key);
                        break;
                    case "lat":
                        keyValArray[1] = requestParams.get(key);
                        break;
                    case "long":
                        keyValArray[2] = requestParams.get(key);
                        break;
                    case "request_for":
                        keyValArray[3] = requestParams.get(key);
                        break;
                    case "request_token":
                        keyValArray[4] = requestParams.get(key);
                        break;
                    case "timestamp":
                        keyValArray[5] = requestParams.get(key);
                        break;
                    case "nt_last_load_id":
                        keyValArray[6] = requestParams.get(key);
                        break;
                    default:
                        Util.log("Util","Invalid Key");
                        break;
                }
            }

            for (String keyValItem:keyValArray) {
                keyValuePairRequest.append(keyValItem);
            }
        }
        Util.log("Util", "Key : " + keyValuePairRequest.toString());
        return keyValuePairRequest.toString();
    }



    public static void displayNotification(Context context,Alert alert){
        android.support.v4.app.NotificationCompat.Builder mBuilder =
                new NotificationCompat.Builder(context)
                        .setSmallIcon(R.mipmap.ic_launcher)
                        .setLargeIcon(alert.getBitmap())
                        .setContentTitle(alert.getAtitle())
                        .setStyle(new NotificationCompat.BigTextStyle()
                .bigText(Html.fromHtml(alert.getAmsg())));
        NotificationManager mNotificationManager =
                (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
// mId allows you to update the notification later on.
        mNotificationManager.notify(alert.getAmsg(), Constants.MID, mBuilder.build());

    }


    public static void saveLoginInformation(Context context, String userName, String password){
        saveSharedPref(context, userName, PREFS_USERNAME);
        saveSharedPref(context, password, PREFS_PASSWORD);
    }

    public static void saveLastNotificationId(Context context, String id){
        saveSharedPref(context,id,PREFS_LAST_NOTIFICATION_ID);
    }

    public static void saveUserType(Context context, String type){
        saveSharedPref(context,type,PREFS_USER_TYPE);
    }

    public static void saveSharedPref(Context context, String value,String key){
        SharedPreferences settings;
        SharedPreferences.Editor editor;
        settings = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE); //1
        editor = settings.edit();
        editor.putString(key, value);
        boolean success = editor.commit();
        Util.log("Shared Pref", "Saved : " + success);
    }

    private static SharedPreferences getSharedPreferences(Context context){
        return context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
    }

    public static boolean isUserInfoStored(Context context) {

        SharedPreferences settings;
        settings = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
        String userName = settings.getString(PREFS_USERNAME,null);
        String password = settings.getString(PREFS_PASSWORD,null);
        return userName != null && password != null;
    }

    public static String getUserPassword(Context context) {
        Util.log("Shared Pref","Pass : " + getSharedPreferences(context).getString(PREFS_PASSWORD,null));
       return getSharedPreferences(context).getString(PREFS_PASSWORD,null);
    }

    public static String getUserName(Context context) {
        Util.log("Shared Pref","User : " + getSharedPreferences(context).getString(PREFS_USERNAME,null));
        return getSharedPreferences(context).getString(PREFS_USERNAME,null);
    }

    public static String getLastNotificationId(Context context) {
        Util.log("Shared Pref","User : " + getSharedPreferences(context).getString(PREFS_LAST_NOTIFICATION_ID,"0"));
        return getSharedPreferences(context).getString(PREFS_LAST_NOTIFICATION_ID,"0");
    }

    public static String getUserType(Context context) {
        Util.log("Shared Pref","User : " + getSharedPreferences(context).getString(PREFS_USER_TYPE,null));
        return getSharedPreferences(context).getString(PREFS_USER_TYPE,null);
    }

    public static boolean checkInternetConnection(Context ctx) {
        ConnectivityManager conMgr = (ConnectivityManager) ctx.getSystemService(Context.CONNECTIVITY_SERVICE);
        if (conMgr.getActiveNetworkInfo() != null
                && conMgr.getActiveNetworkInfo().isAvailable()
                && conMgr.getActiveNetworkInfo().isConnected())
            return true;
        else
            return false;
    }

    public static void showAlert(final Activity activity, String title, String alertMsg){
        final AlertDialog.Builder alert = new AlertDialog.Builder(activity);
        alert.setTitle(title);
        alert.setCancelable(false);
        alert.setMessage(alertMsg);
        alert.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });

        activity.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                alert.show();
            }
        });
    }

    public static boolean isSupportStaffUser(Context context) {
        if(getUserType(context) != null && getUserType(context).equals(USER_TYPE_SUPPORT)){
            return true;
        }
        return false;
    }
}
